==============================================================================
------------------------------------------------------------------------------

A lua version of the [`todotxt.vim`](https://github.com/freitass/todo.txt-vim) plugin for Neovim.

MIT License Copyright (c) 2024 Pedro Mendes

==============================================================================
@module "todotxt"

------------------------------------------------------------------------------
Setup configuration for the todotxt module.
@class Setup
@field todotxt string: Path to the todo.txt file
@field donetxt string: Path to the done.txt file
@field create_commands boolean: Whether to create commands for the functions

------------------------------------------------------------------------------
Floating window options.
@class WindowOptions
@field width number: Width of the window
@field height number: Height of the window
@field border string: Border of the window
@field style string: Style of the window
@field buf number: Buffer that the window will be attached
@field title string: Title of the window

------------------------------------------------------------------------------
Floating window parameters.
@class WindowParameters
@field win number: ID of the window
@field buf number: ID of the buffer

------------------------------------------------------------------------------
@alias SortComparator fun(a: string, b: string): boolean
@alias SortFunction fun(): nil

------------------------------------------------------------------------------
                                                      *todotxt.toggle_todotxt()*
                           `todotxt.toggle_todotxt`()
Opens the todo.txt file in a floating window.
@return nil

------------------------------------------------------------------------------
                                                      *todotxt.toggle_donetxt()*
                           `todotxt.toggle_donetxt`()
Opens the done.txt file in a floating window.
@return nil

------------------------------------------------------------------------------
                                                   *todotxt.toggle_todo_state()*
                         `todotxt.toggle_todo_state`()
Toggles the todo state of the current line in a todo.txt file.
If the line starts with "x YYYY-MM-DD ", it removes it to mark as not done.
Otherwise, it adds "x YYYY-MM-DD " at the beginning to mark as done.
@return nil

------------------------------------------------------------------------------
                                                          *todotxt.sort_tasks()*
                             `todotxt.sort_tasks`()
Sorts the tasks in the open buffer by completion status, priority, and text.
@return nil

------------------------------------------------------------------------------
                                              *todotxt.sort_tasks_by_priority()*
                       `todotxt.sort_tasks_by_priority`()
Sorts the tasks in the open buffer by priority.
@return nil

------------------------------------------------------------------------------
                                               *todotxt.sort_tasks_by_project()*
                       `todotxt.sort_tasks_by_project`()
Sorts the tasks in the open buffer by project.
@return nil

------------------------------------------------------------------------------
                                               *todotxt.sort_tasks_by_context()*
                       `todotxt.sort_tasks_by_context`()
Sorts the tasks in the open buffer by context.
@return nil

------------------------------------------------------------------------------
                                              *todotxt.sort_tasks_by_due_date()*
                       `todotxt.sort_tasks_by_due_date`()
Sorts the tasks in the open buffer by due date.
@return nil

------------------------------------------------------------------------------
                                                      *todotxt.cycle_priority()*
                           `todotxt.cycle_priority`()
Cycles the priority of the current task between A, B, C, and no priority.
@return nil

------------------------------------------------------------------------------
                                                        *todotxt.capture_todo()*
                            `todotxt.capture_todo`()
Captures a new todo entry with the current date.
@return nil

------------------------------------------------------------------------------
                                                     *todotxt.move_done_tasks()*
                          `todotxt.move_done_tasks`()
Moves all done tasks from the todo.txt file to the done.txt file.
@return nil

------------------------------------------------------------------------------
                                                               *todotxt.setup()*
                            `todotxt.setup`({opts})
Setup function
@param opts Setup


==============================================================================
------------------------------------------------------------------------------
                                                         *comparators.default()*
                        `comparators.default`({a}, {b})
Default comparator that sorts by completion status, priority, and text
@param a string First task line
@param b string Second task line
@return boolean

------------------------------------------------------------------------------
                                                      *comparators.completion()*
                       `comparators.completion`({a}, {b})
Comparator that sorts by completion status (incomplete first).
@param a string First task line
@param b string Second task line
@return boolean|nil It returns true if a is incomplete, false if b is incomplete, or nil if both are completed.

------------------------------------------------------------------------------
                                                        *comparators.priority()*
                        `comparators.priority`({a}, {b})
Comparator that sorts by priority
@param a string First task line
@param b string Second task line
@return boolean

------------------------------------------------------------------------------
                                                         *comparators.project()*
                        `comparators.project`({a}, {b})
Comparator that sorts by project
@param a string First task line
@param b string Second task line
@return boolean

------------------------------------------------------------------------------
                                                         *comparators.context()*
                        `comparators.context`({a}, {b})
Comparator that sorts by context
@param a string First task line
@param b string Second task line
@return boolean

------------------------------------------------------------------------------
                                                        *comparators.due_date()*
                        `comparators.due_date`({a}, {b})
Comparator that sorts by due date
@param a string First task line
@param b string Second task line
@return boolean


==============================================================================
------------------------------------------------------------------------------
                                                               *sorter.create()*
                         `sorter.create`({comparator})
Creates a sort function with a specific comparator
@param comparator SortComparator The comparison function to use after completion sorting
@return SortFunction sort_func The full sorting function that can be called without arguments


==============================================================================
------------------------------------------------------------------------------
                                                           *task.is_completed()*
                          `task.is_completed`({line})
Checks if a task is completed
@param line string The line to check
@return boolean status Whether the line is completed

------------------------------------------------------------------------------
                                                    *task.format_as_completed()*
                       `task.format_as_completed`({line})
Format a task as completed
@param line string The task line
@return string completed_task The formatted completed task

------------------------------------------------------------------------------
                                                  *task.format_as_uncompleted()*
                      `task.format_as_uncompleted`({line})
Format a task as not completed
@param line string The task line
@return string uncompleted_task The formatted uncompleted task


==============================================================================
------------------------------------------------------------------------------
                                                         *utils.creation_date()*
                         `utils.creation_date`({line})
Extracts creation date from a task line
@param line string The task line
@return string|nil date The creation date in YYYY-MM-DD format, or nil if not found

------------------------------------------------------------------------------
                                                       *utils.priority_letter()*
                        `utils.priority_letter`({line})
Extracts the priority letter from a line
@param line string The line to check
@return string|nil letter The priority letter or nil

------------------------------------------------------------------------------
                                                       *utils.comparable_text()*
                        `utils.comparable_text`({line})
Cleans up the line to make it comparable.
@param line string The line to process
@return string new_line The processed line

------------------------------------------------------------------------------
                                                      *utils.get_current_date()*
                           `utils.get_current_date`()
Gets current date in YYYY-MM-DD format
@return string|osdate date Current date

------------------------------------------------------------------------------
                                                    *utils.buffer_has_content()*
                      `utils.buffer_has_content`({bufnr})
Checks if a buffer has meaningful content (not just empty lines)
@param bufnr number|nil Buffer number (defaults to current buffer)
@return boolean has_content True if buffer has non-empty content

------------------------------------------------------------------------------
                                                      *utils.extract_priority()*
                        `utils.extract_priority`({line})
Extracts the priority and rest of text from a line
@param line string The line to extract from
@return string|nil priority The priority with parentheses, or nil
@return string rest The rest of the line without priority

------------------------------------------------------------------------------
                                                       *utils.format_new_todo()*
                        `utils.format_new_todo`({input})
Formats a new todo with appropriate date
@param input string Raw input string
@return string todo Formatted todo entry

------------------------------------------------------------------------------
                                                 *utils.update_buffer_if_open()*
              `utils.update_buffer_if_open`({file_path}, {lines})
Updates the buffer if it is open.
@param file_path string
@param lines string[]
@return nil

------------------------------------------------------------------------------
                                                            *utils.sort_table()*
                        `utils.sort_table`({sort_func})
Sorts the tasks in the open buffer by a given function.
@param sort_func SortComparator A function that sorts the lines
@return nil

------------------------------------------------------------------------------
                                                *utils.create_floating_window()*
                     `utils.create_floating_window`({opts})
Creates a floating window
@param opts WindowOptions | nil
@return WindowParameters

------------------------------------------------------------------------------
                                                  *utils.toggle_floating_file()*
           `utils.toggle_floating_file`({file_path}, {file}, {title})
Opens a file in a floating window.
@param file_path string Path to the file to open
@param file "todotxt"|"donetxt" State key
@param title string | nil Title of the window
@return nil

------------------------------------------------------------------------------
                                                *utils.get_hidden_tag_value()*
                       `utils.get_hidden_tag_value`({line})
Extracts hidden tag value from a task line
@param line string The task line
@return number|nil hidden_value The hidden tag value or nil if not found

------------------------------------------------------------------------------
                                                    *utils.should_hide_task()*
                   `utils.should_hide_task`({line}, {config})
Checks if a task should be hidden based on its hidden tag
@param line string The task line
@param config table Plugin configuration
@return boolean should_hide True if the task should be hidden

------------------------------------------------------------------------------
                                                *utils.filter_visible_tasks()*
                   `utils.filter_visible_tasks`({lines}, {config})
Filters out hidden tasks from a list of task lines
@param lines string[] List of task lines
@param config table Plugin configuration
@return string[] filtered_lines List of visible task lines

------------------------------------------------------------------------------
                                                     *utils.get_hidden_tasks()*
                      `utils.get_hidden_tasks`({lines}, {config})
Gets only hidden tasks from a list of task lines
@param lines string[] List of task lines
@param config table Plugin configuration
@return string[] hidden_lines List of hidden task lines

------------------------------------------------------------------------------
                                             *utils.merge_with_hidden_tasks()*
        `utils.merge_with_hidden_tasks`({visible_lines}, {original_file_path}, {config})
Merges visible tasks with hidden tasks for saving
@param visible_lines string[] Currently visible task lines
@param original_file_path string Path to the original file
@param config table Plugin configuration
@return string[] merged_lines Combined visible and hidden task lines

------------------------------------------------------------------------------
                                                             *utils.get_infos()*
                              `utils.get_infos`()
Return infos about the current window
@return integer buf
@return integer start_row
@return string line


 vim:tw=78:ts=8:noet:ft=help:norl:
